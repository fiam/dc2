name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Git tag to release (must be an existing tag)'
        required: true
        type: string

permissions:
  contents: write
  packages: write

env:
  IMAGE_NAME: ghcr.io/${{ github.repository }}

jobs:
  validate-tag:
    runs-on: ubuntu-latest
    steps:
      - name: Set up Git
        run: git config --global --add safe.directory "$GITHUB_WORKSPACE"

      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # required to verify tag and get describe info
          ref: ${{ github.event.inputs.tag || github.ref }}

      - name: Determine Tag
        id: tag
        run: |
          TAG="${{ github.event.inputs.tag || github.ref_name }}"
          echo "TAG=$TAG" >> "$GITHUB_ENV"
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"

      - name: Validate tag is semver
        run: |
          echo "$TAG" | grep -Eq '^v[0-9]+\.[0-9]+\.[0-9]+(-[A-Za-z0-9.-]+)?(\+[A-Za-z0-9.-]+)?$' \
            || { echo "Tag $TAG is not valid semver"; exit 1; }

  build-binaries:
    needs: validate-tag
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
    name: Build binary for ${{ matrix.goos }}/${{ matrix.goarch }}
    steps:
      - name: Set up Git
        run: git config --global --add safe.directory "$GITHUB_WORKSPACE"

      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.inputs.tag || github.ref }}

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.24

      - name: Get Git version
        run: echo "VERSION=$(git describe --tags --dirty --always)" >> $GITHUB_ENV

      - name: Build
        run: |
          mkdir -p dist/
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} \
          go build -ldflags "-X main.Version=${VERSION}" \
            -o dist/dc2-${{ matrix.goos }}-${{ matrix.goarch }} ./cmd/dc2

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: dc2-${{ matrix.goos }}-${{ matrix.goarch }}
          path: dist/dc2-${{ matrix.goos }}-${{ matrix.goarch }}

  release:
    needs: build-binaries
    runs-on: ubuntu-latest
    steps:
      - name: Download all binary artifacts
        uses: actions/download-artifact@v4

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.event.inputs.tag || github.ref_name }}
          generate_release_notes: true
          files: |
            dc2-*/*

  docker:
    needs: validate-tag
    runs-on: ubuntu-latest
    steps:
      - name: Set up Git
        run: git config --global --add safe.directory "$GITHUB_WORKSPACE"

      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.inputs.tag || github.ref }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Multi-Arch Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: true
          target: dc2
          tags: |
            ${{ env.IMAGE_NAME }}:${{ github.event.inputs.tag || github.ref_name }}
            ${{ env.IMAGE_NAME }}:latest
          platforms: linux/amd64,linux/arm64
